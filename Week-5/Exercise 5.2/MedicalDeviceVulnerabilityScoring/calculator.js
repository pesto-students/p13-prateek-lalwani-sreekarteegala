
const scores = {
    AV: {
        N: 0.85,
        A: 0.62,
        L: 0.55,
        P: 0.20
    },
    AC: {
        L: 0.77,
        H: 0.44
    },
    PR: {
        N: 0.85,
        L: 0.62,
        H: 0.27
    },
    UI: {
        N: 0.85,
        R: 0.62
    },
    scope: {
        U: 1.0,
        C: 1.08
    },
    conf: {
        N: 0,
        L: 1,
        H: 2
    },
    integ: {
        N: 0,
        L: 1,
        H: 2
    },
    avail: {
        N: 0,
        L: 1,
        H: 2
    },
    health: {
        N: 0,
        L: 1,
        H: 2
    },
    sens: {
        N: 0,
        L: 1,
        H: 2
    },
};
const baseConfMatrix = [
    [0.00, 0.22, 0.56],
    [0.00, 0.65, 0.75],
    [0.00, 0.85, 0.95]
]
const baseAvailMatrix = [
    [0.00, 0.22, 0.56],
    [0.55, 0.60, 0.65],
    [0.85, 0.90, 0.95]
];
const baseIntegMatrix = [
    [0.00, 0.22, 0.56],
    [0.55, 0.60, 0.75],
    [0.85, 0.90, 0.95]
];
const properties = Object.keys(scores);
const map = new Map();
const data = document.getElementsByTagName("input");

for (let i = 0; i < data.length; i++) {
    data[i].addEventListener("click", (event) => {
        map.set(event.target.name, event.target.value.split('_')[1]);
        updateScore();
    })
}

function updateScore(event) {
    // check if all properties are selected for score
    let allPropertiesSelected = true;
    for (const property of properties) {
        const selectedButtons = document.querySelectorAll(`input[name="${property}"]:checked`);
        if (selectedButtons.length !== 1) {
            allPropertiesSelected = false;
            break;
        }
    }

    const scoreElement = document.getElementById("score");

    if (allPropertiesSelected) {
        // Calculate & Update the vulnerability score and hide the warning label
        scoreElement.textContent = Math.round(calculateVulnerabilityScore(map));
        document.getElementById("warning").style.display = "none";
    } else {
        // If not all properties are selected, show the warning and reset the score
        scoreElement.textContent = "--";
        document.getElementById("warning").style.display = "block";
    }
}

function calculateVulnerabilityScore(values) {
    console.log("calculated", values)

    const avScore = scores["AV"][map.get("AV")];
    const acScore = scores["AC"][map.get("AC")];
    const prScore = scores["PR"][map.get("PR")];
    const uiScore = scores["UI"][map.get("UI")];
    const scopeScore = scores["scope"][map.get("scope")];
    const confScore = scores["conf"][map.get("conf")];
    const integScore = scores["integ"][map.get("integ")];
    const availScore = scores["avail"][map.get("avail")];
    const healthScore = scores["health"][map.get("health")];
    const sensScore = scores["sens"][map.get("sens")];

    const scopeExploitability = avScore * acScore * prScore * uiScore;
    const baseConf = baseConfMatrix[sensScore][confScore];
    const baseInteg = baseIntegMatrix[healthScore][integScore];
    const baseAvail = baseAvailMatrix[healthScore][availScore];

    // Calcuate if sum(baseScores) is 0 then Final Score is 0
    let finalScore = 0;
    if ((baseConf + baseInteg + baseAvail) > 0)
        finalScore = (scopeScore) * (3.326258289 * (baseConf + baseInteg + baseAvail) + (1.1 * scopeExploitability));


    return finalScore;
}